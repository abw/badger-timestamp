import{_ as a,c as e,o as t,a2 as o}from"./chunks/framework.CY1b6e2z.js";const f=JSON.parse('{"title":"Utility Functions","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"utility-functions.md","filePath":"utility-functions.md","lastUpdated":1709293730000}'),n={name:"utility-functions.md"},i=o('<h1 id="utility-functions" tabindex="-1">Utility Functions <a class="header-anchor" href="#utility-functions" aria-label="Permalink to &quot;Utility Functions&quot;">​</a></h1><h2 id="assertion-functions" tabindex="-1">Assertion Functions <a class="header-anchor" href="#assertion-functions" aria-label="Permalink to &quot;Assertion Functions&quot;">​</a></h2><h3 id="isTimestamp" tabindex="-1">isTimestamp(ts) <a class="header-anchor" href="#isTimestamp" aria-label="Permalink to &quot;isTimestamp(ts) {#isTimestamp}&quot;">​</a></h3><p>Function to determine if a string matches a timestamp format.</p><h3 id="isDate" tabindex="-1">isDate(date) <a class="header-anchor" href="#isDate" aria-label="Permalink to &quot;isDate(date) {#isDate}&quot;">​</a></h3><p>Function to determine if a variable is a <code>Date</code> object.</p><h2 id="parsing-functions" tabindex="-1">Parsing Functions <a class="header-anchor" href="#parsing-functions" aria-label="Permalink to &quot;Parsing Functions&quot;">​</a></h2><h3 id="splitTimestamp" tabindex="-1">splitTimestamp(string) <a class="header-anchor" href="#splitTimestamp" aria-label="Permalink to &quot;splitTimestamp(string) {#splitTimestamp}&quot;">​</a></h3><p>Parses a timestamp string and return an object containing the component parts: <code>year</code>, <code>month</code>, <code>day</code>, <code>hours</code>, <code>minutes</code> and <code>seconds</code>.</p><h3 id="unpackDate" tabindex="-1">unpackDate(date) <a class="header-anchor" href="#unpackDate" aria-label="Permalink to &quot;unpackDate(date) {#unpackDate}&quot;">​</a></h3><p>Unpacks the items from a <code>Date</code> object and returns an object containing the component parts: <code>year</code>, <code>month</code>, <code>day</code>, <code>hours</code>, <code>minutes</code> and <code>seconds</code>.</p><h3 id="unpackNow" tabindex="-1">unpackNow() <a class="header-anchor" href="#unpackNow" aria-label="Permalink to &quot;unpackNow() {#unpackNow}&quot;">​</a></h3><p>Creates a <code>Date</code> object for the current time then calls <code>unpackDate()</code> to unpack it into constituent parts.</p><h3 id="parseDate" tabindex="-1">parseDate(string) <a class="header-anchor" href="#parseDate" aria-label="Permalink to &quot;parseDate(string) {#parseDate}&quot;">​</a></h3><p>Passes a string the <code>Date.parse()</code> constructor and then calls <code>unpackDate()</code> to unpack it into constituent parts.</p><h3 id="parseDuration" tabindex="-1">parseDuration(string) <a class="header-anchor" href="#parseDuration" aria-label="Permalink to &quot;parseDuration(string) {#parseDuration}&quot;">​</a></h3><p>Parses a duration string (e.g. <code>1 year 3 months</code>) and returns an object containing the consituent parts (e.g. <code>{ year: 1, month: 3 }</code>). Note that this always returns components in singular form (e.g. <code>year</code> and <code>month</code>) regardless of how they were specified in the string.</p><h3 id="singularDurations" tabindex="-1">singularDurations(durations) <a class="header-anchor" href="#singularDurations" aria-label="Permalink to &quot;singularDurations(durations) {#singularDurations}&quot;">​</a></h3><p>Function to convert an object containing any plural duration units (e.g. <code>hours</code>) to the singular counterpart (e.g. <code>hour</code>).</p><h2 id="formatting-functions" tabindex="-1">Formatting Functions <a class="header-anchor" href="#formatting-functions" aria-label="Permalink to &quot;Formatting Functions&quot;">​</a></h2><h3 id="joinDate" tabindex="-1">joinDate(timestamp, joint) <a class="header-anchor" href="#joinDate" aria-label="Permalink to &quot;joinDate(timestamp, joint) {#joinDate}&quot;">​</a></h3><p>Function to join the constituent parts of a date.</p><h3 id="joinTime" tabindex="-1">joinTime(timestamp, joint) <a class="header-anchor" href="#joinTime" aria-label="Permalink to &quot;joinTime(timestamp, joint) {#joinTime}&quot;">​</a></h3><p>Function to join the constituent parts of a time.</p><h3 id="joinTimestamp" tabindex="-1">joinTimestamp(timestamp, config) <a class="header-anchor" href="#joinTimestamp" aria-label="Permalink to &quot;joinTimestamp(timestamp, config) {#joinTimestamp}&quot;">​</a></h3><p>Function to format a timestamp string from a <code>Timestamp</code> object. The <code>config</code> options can be used to override the default values for <code>joint</code>, <code>dateJoint</code> and/or <code>timeJoint</code>.</p><h2 id="miscellaneous-functions" tabindex="-1">Miscellaneous Functions <a class="header-anchor" href="#miscellaneous-functions" aria-label="Permalink to &quot;Miscellaneous Functions&quot;">​</a></h2><h3 id="daysInMonth" tabindex="-1">daysInMonth(month, year) <a class="header-anchor" href="#daysInMonth" aria-label="Permalink to &quot;daysInMonth(month, year) {#daysInMonth}&quot;">​</a></h3><p>Return the number of days in a month.</p><h3 id="leapYear" tabindex="-1">leapYear(year) <a class="header-anchor" href="#leapYear" aria-label="Permalink to &quot;leapYear(year) {#leapYear}&quot;">​</a></h3><p>Returns a boolean value indicating if a year is a leap year.</p>',31),s=[i];function r(c,d,u,h,l,p){return t(),e("div",null,s)}const b=a(n,[["render",r]]);export{f as __pageData,b as default};
