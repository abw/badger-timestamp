import{_ as e,c as a,a1 as d,o}from"./chunks/framework.BeunNgS1.js";const f=JSON.parse('{"title":"Reference","description":"","frontmatter":{},"headers":[],"relativePath":"reference.md","filePath":"reference.md","lastUpdated":1722675594000}'),r={name:"reference.md"};function s(i,t,n,m,h,c){return o(),a("div",null,t[0]||(t[0]=[d('<h1 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h1><h2 id="constructor-functions" tabindex="-1">Constructor Functions <a class="header-anchor" href="#constructor-functions" aria-label="Permalink to &quot;Constructor Functions&quot;">​</a></h2><p>Functions to create Timestamp objects.</p><table tabindex="0"><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><a href="./creating-timestamps.html#timestamp"><code>timestamp(ts)</code></a></td><td>Create a new timestamp object</td></tr><tr><td><a href="./creating-timestamps.html#now"><code>now()</code></a></td><td>Create a new timestamp for the current date/time</td></tr></tbody></table><h2 id="timestamp-methods" tabindex="-1">Timestamp Methods <a class="header-anchor" href="#timestamp-methods" aria-label="Permalink to &quot;Timestamp Methods&quot;">​</a></h2><p>Methods for getting and setting parts of a Timestamp object.</p><table tabindex="0"><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><a href="./creating-timestamps.html#copy"><code>copy()</code></a></td><td>Create a copy of a timestamp object</td></tr><tr><td><a href="./timestamp-components.html#year"><code>year()</code></a></td><td>Get or set the year</td></tr><tr><td><a href="./timestamp-components.html#month"><code>month()</code></a></td><td>Get or set the month</td></tr><tr><td><a href="./timestamp-components.html#day"><code>day()</code></a></td><td>Get or set the day</td></tr><tr><td><a href="./timestamp-components.html#hours"><code>hours()</code></a></td><td>Get or set the hours</td></tr><tr><td><a href="./timestamp-components.html#minutes"><code>minutes()</code></a></td><td>Get or set the minutes</td></tr><tr><td><a href="./timestamp-components.html#seconds"><code>seconds()</code></a></td><td>Get or set the seconds</td></tr><tr><td><a href="./timestamp-components.html#epochSeconds"><code>epochSeconds()</code></a></td><td>Return the seconds since the epoch</td></tr><tr><td><a href="./timestamp-components.html#epochMilliseconds"><code>epochMilliseconds()</code></a></td><td>Return the milliseconds since the epoch</td></tr><tr><td><a href="./timestamp-components.html#dateObject"><code>dateObject()</code></a></td><td>Return a Date object</td></tr></tbody></table><h2 id="formatting-methods" tabindex="-1">Formatting Methods <a class="header-anchor" href="#formatting-methods" aria-label="Permalink to &quot;Formatting Methods&quot;">​</a></h2><p>Methods for formatting a Timestamp object.</p><table tabindex="0"><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><a href="./formatting-timestamps.html#stamp"><code>stamp()</code></a></td><td>Return the Timestamp in ISO8601 format</td></tr><tr><td><a href="./formatting-timestamps.html#toString"><code>toString()</code></a></td><td>Alias for <code>stamp()</code> for auto-stringification</td></tr><tr><td><a href="./formatting-timestamps.html#date"><code>date()</code></a></td><td>Return the formatted date</td></tr><tr><td><a href="./formatting-timestamps.html#time"><code>time()</code></a></td><td>Return the formatted time</td></tr><tr><td><a href="./formatting-timestamps.html#weekday"><code>weekday()</code></a></td><td>Return the weekday number</td></tr><tr><td><a href="./formatting-timestamps.html#weekdayName"><code>weekdayName()</code></a></td><td>Return the weekday name</td></tr><tr><td><a href="./formatting-timestamps.html#monthName"><code>monthName()</code></a></td><td>Return the month name</td></tr><tr><td><a href="./formatting-timestamps.html#kebab"><code>kebab()</code></a></td><td>Return the timestamp in kebab case, e.g. <code>2024-03-01-11-14-01</code></td></tr><tr><td><a href="./formatting-timestamps.html#kebab"><code>kebabDate()</code></a></td><td>Return the date in kebab case, e.g. <code>2024-03-01</code></td></tr><tr><td><a href="./formatting-timestamps.html#kebab"><code>kebabTime()</code></a></td><td>Return the time in kebab case, e.g. <code>11-14-01</code></td></tr><tr><td><a href="./formatting-timestamps.html#kebab"><code>kebabDateTime()</code></a></td><td>Return the date and time in kebab case, e.g. <code>20240301-111401</code></td></tr><tr><td><a href="./formatting-timestamps.html#snake"><code>snake()</code></a></td><td>Return the timestamp in snake case, e.g. <code>2024_03_01_11_14_01</code></td></tr><tr><td><a href="./formatting-timestamps.html#snake"><code>snakeDate()</code></a></td><td>Return the date in snake case, e.g. <code>2024_03_01</code></td></tr><tr><td><a href="./formatting-timestamps.html#snake"><code>snakeTime()</code></a></td><td>Return the time in snake case, e.g. <code>11_14_01</code></td></tr><tr><td><a href="./formatting-timestamps.html#snake"><code>snakeDateTime()</code></a></td><td>Return the date and time in snake case, e.g. <code>20240301_111401</code></td></tr><tr><td><a href="./formatting-timestamps.html#squish"><code>squish()</code></a></td><td>Return the date and time squished together e.g. <code>20240301111401</code></td></tr><tr><td><a href="./formatting-timestamps.html#squish"><code>squishDate()</code></a></td><td>Return the date squished together, e.g. <code>20240301</code></td></tr><tr><td><a href="./formatting-timestamps.html#squish"><code>squishTime()</code></a></td><td>Return the time squished together, e.g. <code>111401</code></td></tr></tbody></table><h2 id="adjustment-methods" tabindex="-1">Adjustment Methods <a class="header-anchor" href="#adjustment-methods" aria-label="Permalink to &quot;Adjustment Methods&quot;">​</a></h2><p>Methods for adjusting a Timestamp object.</p><table tabindex="0"><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><a href="./adjusting-timestamps.html#adjust"><code>adjust(change)</code></a></td><td>Adjust the Timestamp</td></tr></tbody></table><h2 id="comparison-methods" tabindex="-1">Comparison Methods <a class="header-anchor" href="#comparison-methods" aria-label="Permalink to &quot;Comparison Methods&quot;">​</a></h2><p>Methods for comparing Timestamps.</p><table tabindex="0"><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><a href="./comparing-timestamps.html#compare"><code>compare(ts)</code></a></td><td>Compare the Timestamp with another one</td></tr><tr><td><a href="./comparing-timestamps.html#equal"><code>equal(ts)</code></a></td><td>Test if the Timestamp is equal to another one</td></tr><tr><td><a href="./comparing-timestamps.html#before"><code>before(ts)</code></a></td><td>Test if the Timestamp is before another one</td></tr><tr><td><a href="./comparing-timestamps.html#after"><code>after(ts)</code></a></td><td>Test if the Timestamp is after another one</td></tr><tr><td><a href="./comparing-timestamps.html#notBefore"><code>notBefore(ts)</code></a></td><td>Test if the Timestamp is not before another one</td></tr><tr><td><a href="./comparing-timestamps.html#notAfter"><code>notAfter(ts)</code></a></td><td>Test if the Timestamp is not after another one</td></tr><tr><td><a href="./comparing-timestamps.html#inThePast"><code>inThePast()</code></a></td><td>Test if the Timestamp is in the past</td></tr><tr><td><a href="./comparing-timestamps.html#inTheFuture"><code>inTheFuture()</code></a></td><td>Test if the Timestamp is in the future</td></tr></tbody></table><h2 id="utility-functions" tabindex="-1">Utility Functions <a class="header-anchor" href="#utility-functions" aria-label="Permalink to &quot;Utility Functions&quot;">​</a></h2><p>Utility function used internally or for your own use.</p><table tabindex="0"><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><a href="./utility-functions.html#isTimestamp"><code>isTimestamp(ts)</code></a></td><td>Test if the argument matches a timestamp format</td></tr><tr><td><a href="./utility-functions.html#isDate"><code>isDate(date)</code></a></td><td>Test if the argument is a Date object</td></tr><tr><td><a href="./utility-functions.html#splitTimestamp"><code>splitTimestamp(ts)</code></a></td><td>Split a timestamp string into component parts</td></tr><tr><td><a href="./utility-functions.html#unpackDate"><code>unpackDate(date)</code></a></td><td>Extract the component parts from a Date object</td></tr><tr><td><a href="./utility-functions.html#unpackNow"><code>unpackNow()</code></a></td><td>Extract the component parts from a Date object for the current date/time</td></tr><tr><td><a href="./utility-functions.html#parseDate"><code>parseDate(date)</code></a></td><td>Parse a date string using <code>Date.parse()</code> and unpack</td></tr><tr><td><a href="./utility-functions.html#parseDuration"><code>parseDuration(dur)</code></a></td><td>Parse a duration string, e.g. <code>3 months</code></td></tr><tr><td><a href="./utility-functions.html#singularDurations"><code>singularDurations(dur)</code></a></td><td>Convert plural durations to singular form, e.g. <code>hours</code> to <code>hour</code></td></tr><tr><td><a href="./utility-functions.html#joinDate"><code>joinDate(ts)</code></a></td><td>Join a Timestamp date into a string</td></tr><tr><td><a href="./utility-functions.html#joinTime"><code>joinTime(ts)</code></a></td><td>Join a Timestamp time into a string</td></tr><tr><td><a href="./utility-functions.html#joinTimestamp"><code>joinTimestamp(ts)</code></a></td><td>Join a Timestamp into a string</td></tr><tr><td><a href="./utility-functions.html#daysInMonth"><code>daysInMonth(month, year)</code></a></td><td>Returns the number of days in a month</td></tr><tr><td><a href="./utility-functions.html#leapYear"><code>leapYear(year)</code></a></td><td>Determine if a year is a leap year</td></tr></tbody></table>',19)]))}const u=e(r,[["render",s]]);export{f as __pageData,u as default};
