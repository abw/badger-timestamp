[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Timestamp.js",
    "content": "import {\n  hasValue, isInteger, isObject, isString, noValue,\n  fail, doNothing\n} from \"@abw/badger-utils\";\n\nconst MATCH_DATE  = '(\\\\d{4})\\\\D(\\\\d{1,2})\\\\D(\\\\d{1,2})';\nconst MATCH_TIME  = '(\\\\d{1,2})\\\\D(\\\\d{2})\\\\D(\\\\d{2})';\nconst MATCH_STAMP = `^\\\\s*${MATCH_DATE}(?:(?:T|\\\\s)${MATCH_TIME})?`;\nconst STAMP_REGEX = new RegExp(MATCH_STAMP);\nconst STAMP_PARTS = [undefined, 'year', 'month', 'day', 'hours', 'minutes', 'seconds'];\nconst DURATIONS   = ['year', 'month', 'day', 'hour', 'minute', 'second'];\nconst PLURALS     = { hour: 'hours', minute: 'minutes', second: 'seconds' };\n\n/**\n * Default configuration options.\n */\nconst defaults = {\n  joint:     ' ',\n  dateJoint: '-',\n  timeJoint: ':',\n}\n\n/**\n * The Timestamp class implements an object for parsing, manipulating\n * and formatting ISO8601 timestamps.\n */\nexport class Timestamp {\n  /**\n   * Constructor for Timestamp object.\n   * @param {String|Integer|Date|Object} [ts] - timestamp\n   * @param {Object} [options] - configuration options\n   * @param {String} [options.joint=' '] - joining character between date and time parts\n   * @param {String} [options.dateJoint='-'] - joining character for date segments\n   * @param {String} [options.timeJoint=':'] - joining character for time segments\n   */\n  constructor(ts, options) {\n    const props = { ...defaults, ...options };\n    this.props = props;\n\n    this.debug = props.debug\n      ? console.log.bind(console)\n      : doNothing;\n\n    if (noValue(ts)) {\n      // use current time if no argument provided\n      this.parts = unpackNow()\n    }\n    else if (ts instanceof Timestamp) {\n      // copy constructor\n      this.parts = { ...ts.parts };\n    }\n    else if (isTimestamp(ts)) {\n      // split timestamp string\n      this.parts = splitTimestamp(ts)\n    }\n    else if (isString(ts)) {\n      // parse another date string\n      this.parts = parseDate(ts)\n    }\n    else if (isDate(ts)) {\n      // unpack a Date object\n      this.parts = unpackDate(ts)\n    }\n    else if (isInteger(ts)) {\n      // milliseconds since the epoch\n      this.parts = parseDate(ts)\n    }\n    else if (isObject(ts)) {\n      if (hasValue(ts.unix)) {\n        // seconds since unix epoch time, multiply by 1000 to get JS milliseconds\n        this.parts = parseDate(ts.unix * 1000);\n      }\n      else if (hasValue(ts.ms)) {\n        // milliseconds since unix epoch time\n        this.parts = parseDate(ts.ms);\n      }\n      else {\n        // object containing year, month, day, etc.\n        this.parts = ts\n      }\n    }\n    else {\n      fail(\"Invalid timestamp: \", ts)\n    }\n  }\n  /**\n   * Method to return a new object as a copy of the current object\n   * @return {Object} - new `Timestamp` object\n   */\n  copy() {\n    return new Timestamp(this.parts);\n  }\n  /**\n   * Method to get or set the year.\n   * @param {Integer} [year] - optional new value for year\n   * @return {Integer} - the year\n   */\n  year(year) {\n    if (hasValue(year)) {\n      this.parts.year = year;\n    }\n    return this.parts.year;\n  }\n  /**\n   * Method to get or set the month.\n   * @param {Integer} [month] - optional new value for month\n   * @return {Integer} - the month\n   */\n  month(month) {\n    if (hasValue(month)) {\n      this.parts.month = month;\n    }\n    return this.parts.month;\n  }\n  /**\n   * Method to get or set the day.\n   * @param {Integer} [day] - optional new value for day\n   * @return {Integer} - the day\n   */\n  day(day) {\n    if (hasValue(day)) {\n      this.parts.day = day;\n    }\n    return this.parts.day;\n  }\n  /**\n   * Method to get or set the hours.\n   * @param {Integer} [hours] - optional new value for hours\n   * @return {Integer} - the hours\n   */\n  hours(hours) {\n    if (hasValue(hours)) {\n      this.parts.hours = hours;\n    }\n    return this.parts.hours;\n  }\n  /**\n   * Method to get or set the minutes.\n   * @param {Integer} [minutes] - optional new value for minutes\n   * @return {Integer} - the minutes\n   */\n  minutes(minutes) {\n    if (hasValue(minutes)) {\n      this.parts.minutes = minutes;\n    }\n    return this.parts.minutes;\n  }\n  /**\n   * Method to get or set the seconds.\n   * @param {Integer} [seconds] - optional new value for seconds\n   * @return {Integer} - the seconds\n   */\n  seconds(seconds) {\n    if (hasValue(seconds)) {\n      this.parts.seconds = seconds;\n    }\n    return this.parts.seconds;\n  }\n  /**\n   * Method to return a formatted date string in the form `YYYY-MM-DD`.\n   * @param {String} [joint='-'] - optional joining character\n   * @return {String} - formatted date string\n   */\n  date(joint=this.props.dateJoint) {\n    return joinDate(this.parts, joint)\n  }\n  /**\n   * Method to return a formatted time string in the form `HH:MM:SS`.\n   * @param {String} [joint=':''] - optional joining character\n   * @return {String} - formatted time string\n   */\n  time(joint=this.props.timeJoint) {\n    return joinTime(this.parts, joint)\n  }\n  /**\n   * Method to return a formatted timestamp string in the form `YYYY-MM-DD HH:MM:SS`.\n   * @param {Object} [options] - configuration options\n   * @param {String} [options.joint=' '] - joining character between date and time parts\n   * @param {String} [options.dateJoint='-'] - joining character for date segments\n   * @param {String} [options.timeJoint=':'] - joining character for time segments\n   * @return {String} - formatted date/time stamp\n   */\n  stamp(options={}) {\n    return joinTimestamp(this.parts, { ...this.props, ...options })\n  }\n  /**\n   * Method to return a `Date` object\n   * @return {Date} - new date object\n   */\n  dateObject() {\n    return new Date(this.stamp({ joint: 'T', dateJoint: '-', timeJoint: ':' }));\n  }\n  /**\n   * Method to return the number of millseconds since the Unix epoch\n   * @return {Integer} - the number of milliseconds\n   */\n  milliseconds() {\n    return this.dateObject().getTime();\n  }\n  /**\n   * Method to return the number of seconds since the Unix epoch\n   * @return {Integer} - the number of seconds\n   */\n  epochSeconds() {\n    return Math.floor(this.milliseconds() / 1000);\n  }\n  /**\n   * Method to adjust the timestamp.  The duration can be specified as a string containing\n   * one or more items to adjust in either singular or plural form, e.g. `\"1 year, 1 month\"`,\n   * `\"2 years 2 months\"`, etc. Or it can be specified as an object: `{ year: 1, month: 1 }`,\n   * `{ years: 2, months: 2 }`, etc.\n   * @param {String|Object} duration - a string or object of adjustments\n   * @example\n   * ts.adjust(\"1 year 2 months 3 hours\")\n   * @example\n   * ts.adjust({ year: 1, months: 2, hours: 3 })\n   */\n  adjust(duration) {\n    let p = this.parts;\n    const d = isString(duration)\n      ? parseDuration(duration)         // parse string to object\n      : singularDurations(duration);    // convert plurals (e.g. \"hours\") to singular form (e.g. \"hour\")\n    DURATIONS.forEach(\n      unit => {\n        const value = d[unit];\n        if (hasValue(value)) {\n          // By convention we store date elements in singular (year, month, day) and time\n          // elements in plural (hours, minutes, seconds), but we convert all durations to\n          // singluar in parseDuration() and singularDuration() (because it's easier to drop\n          // an 's' from the end of plural than optionally add one.  Here we use the PLURALS\n          // lookup table to map singular hour, minute and second back to their plurals.\n          p[PLURALS[unit]||unit] += value;\n        }\n      }\n    );\n\n    // time underflow\n    while (p.seconds < 0) {\n      p.seconds += 60;\n      p.minutes--;\n    }\n    while (p.minutes < 0) {\n      p.minutes += 60;\n      p.hours--;\n    }\n    while (p.hours < 0) {\n      p.hours += 24;\n      p.day--;\n    }\n\n    // time overflow\n    if (p.seconds > 59) {\n      p.minutes += Math.floor(p.seconds / 60);\n      p.seconds %= 60;\n    }\n    if (p.minutes > 59) {\n      p.hours += Math.floor(p.minutes / 60);\n      p.minutes %= 60;\n    }\n    if (p.hours > 23) {\n      p.day += Math.floor(p.hours / 24);\n      p.hours %= 24;\n    }\n\n    // date underflow\n    while (p.day <= 0) {\n      p.month--;\n      if (p.month <= 0) {\n        p.month += 12;\n        p.year--;\n      }\n      p.day += daysInMonth(p.month, p.year);\n    }\n    while (p.month <= 0) {\n      p.month += 12;\n      p.year--;\n    }\n\n    // month overflow\n    while (p.month > 12) {\n      p.month -= 12;\n      p.year++;\n    }\n\n    // day overflow\n    let dim;\n    while (p.day > (dim = daysInMonth(p.month, p.year))) {\n      p.day -= dim;\n      if (p.month == 12) {\n        p.month = 1;\n        p.year++;\n      }\n      else {\n        p.month++;\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Method to compare the timestamp to another.  The arguments can be any that are accepted\n   * by the constructor.\n   * one or more items to adjust in either singular or plural form, e.g. `\"1 year, 1 month\"`,\n   * `\"2 years 2 months\"`, etc. Or it can be specified as an object: `{ year: 1, month: 1 }`,\n   * `{ years: 2, months: 2 }`, etc.\n   * @param {Array} args - any argument(s) accepted by the constructor\n   * @return {Integer} - -1 if the timestamp is before the comparator, 0 if it's equal, +1 if it's after.\n   */\n  compare(...args) {\n    const that  = new Timestamp(...args);\n    const thisp = this.parts;\n    const thatp = that.parts;\n\n    for (let p of STAMP_PARTS) {\n      if (p) {\n        if (thisp[p] < thatp[p]) {\n          this.debug(\"[%s] this[%s] < that[%s]\", p, thisp[p], thatp[p])\n          return -1;\n        }\n        else if (thisp[p] > thatp[p]) {\n          this.debug(\"[%s] this[%s] > that[%s]\", p, thisp[p], thatp[p])\n          return 1;\n        }\n        else {\n          this.debug(\"[%s] this[%s] = that[%s]\", p, thisp[p], thatp[p])\n        }\n      }\n    }\n    return 0;\n  }\n  /**\n   * Method to compare one timestamp to another for equality\n   * @param {Array} args - any argument(s) accepted by the constructor\n   * @return {Boolean} - true if the timestamp is equal to the operand\n   */\n  equal(...args) {\n    return this.compare(...args) == 0;\n  }\n  /**\n   * Method to test for the timestamp coming before another timestamp\n   * @param {Array} args - any argument(s) accepted by the constructor\n   * @return {Boolean} - true if the timestamp is before the operand\n   */\n  before(...args) {\n    return this.compare(...args) == -1;\n  }\n  /**\n   * Method to test for the timestamp coming after another timestamp\n   * @param {Array} args - any argument(s) accepted by the constructor\n   * @return {Boolean} - true if the timestamp is after the operand\n   */\n  after(...args) {\n    return this.compare(...args) == 1;\n  }\n  /**\n   * Method to test for the timestamp being equal to or coming after another timestamp\n   * @param {Array} args - any argument(s) accepted by the constructor\n   * @return {Boolean} - true if the timestamp is equal to or coming after the operand\n   */\n  notBefore(...args) {\n    return this.compare(...args) >= 0;\n  }\n  /**\n   * Method to test for the timestamp being equal to or coming before another timestamp\n   * @param {Array} args - any argument(s) accepted by the constructor\n   * @return {Boolean} - true if the timestamp is equal to or coming before the operand\n   */\n  notAfter(...args) {\n    return this.compare(...args) <= 0;\n  }\n}\n\n/**\n * Function to determine is a string is a valid timestamp.\n * @param {String} ts - timestamp string\n * @return {Boolean} - value indicating if the string is a timestamp\n */\nexport const isTimestamp = ts =>\n  isString(ts) && ts.match(STAMP_REGEX);\n\n/**\n * Function to split a timestamp into its constituent parts\n * @param {String} ts - timestamp string\n * @return {Object} - object containing `year`, `month`, `day`, `hours`, `minutes` and `seconds`.\n */\nexport const splitTimestamp = ts => {\n  const match = ts.match(STAMP_REGEX) || fail(\"Invalid timestamp: \", ts);\n  let result = { };\n  STAMP_PARTS.forEach(\n    (part, n) => {\n      if (part && match[n]) {\n        result[part] = parseInt(match[n]);\n      }\n    }\n  );\n  // console.log('%s => ', ts, result);\n  return result;\n}\n\n/**\n * Function to determine is a valid is a `Date` object\n * @param {Date} date - date object or other value\n * @return {Boolean} - value indicating if the `date` is a `Date` object\n */\nexport const isDate = date =>\n  date instanceof Date;\n\n/**\n * Function to return an object containing the constituent timestamp parts for the current time.\n * @return {Object} - object containing `year`, `month`, `day`, `hours`, `minutes` and `seconds`.\n */\nexport const unpackNow = () =>\n  unpackDate(new Date());\n\n/**\n * Function to return an object containing the constituent timestamp parts for a date/time.\n * @param {Date} date - date object or string that can be parsed by `Date.parse()`\n * @return {Object} - object containing `year`, `month`, `day`, `hours`, `minutes` and `seconds`.\n */\nexport const parseDate = (date) =>\n  unpackDate(new Date(date));\n\n/**\n * Function to return an object containing the constituent timestamp parts for a `Date` object\n * @param {Date} date - date object\n * @return {Object} - object containing `year`, `month`, `day`, `hours`, `minutes` and `seconds`.\n */\nexport const unpackDate = date => ({\n  year:    date.getFullYear(),\n  month:   date.getMonth() + 1,\n  day:     date.getDate(),\n  hours:   date.getHours(),\n  minutes: date.getMinutes(),\n  seconds: date.getSeconds(),\n})\n\n/**\n * Function to parse a duration string, e.g. `1 hour 3 minutes`.\n * Quantities must be integers. Units can be singular (e.g. `hour`) or plural (e.g. `hours`).\n * Other characters may appear between sections, e.g. `1 hour, 2 minutes and 3 seconds`.\n * @param {Date} duration - duration string\n * @return {Object} - object containing any of `year`, `month`, `day`, `hour`, `minute` and `second`.\n */\nexport const parseDuration = duration => {\n  const match = duration.matchAll(/(-?\\d+)\\s*(\\w+)/g);\n  let result = { };\n\n  for (let m of match) {\n    const n = parseInt(m[1]);           // convert quantity to integer\n    const d = m[2].replace(/s$/, '');   // convert plural to singular\n    result[d] = n;\n  }\n  return result;\n}\n\n/**\n * Function to convert an object containing any plural duration units (e.g. `hours`) to the singular counterpart (e.g. `hour`).\n * @param {Object} duration - object containing duration elements, either plural or singluar.\n * @return {Object} - object containing any of `year`, `month`, `day`, `hour`, `minute` and `second`.\n */\nexport const singularDurations = duration => {\n  let result = { };\n  Object.entries(duration).forEach(\n    ([key, value]) => {\n      result[key.replace(/s$/, '')] = value;\n    }\n  )\n  return result;\n}\n\n/**\n * Function to join the constituent parts of a time stamp into a string\n * @param {Object} ts - object containing `year`, `month`, `day`, and optionally, `hours`, `minutes` and `seconds`.\n * @param {String} ts.year - the year as an integer\n * @param {String} ts.month - the month as an integer from 1 to 12\n * @param {String} ts.day - the month as an integer\n * @param {String} ts.[hours] - the hours as an integer from 0 to 23\n * @param {String} ts.[minutes] - the minutes as an integer from 0 to 59\n * @param {String} ts.[seconds] - the seconds as an integer from 0 to 59\n * @param {String} [config] - optional configuration options\n * @param {String} [config.joint=' '] - joining character between date and time parts\n * @param {String} [config.dateJoint='-'] - joining character for date segments\n * @param {String} [config.timeJoint=':'] - joining character for time segments\n * @return {String} - timestamp string of the form `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS`\n */\nexport const joinTimestamp = (ts, config={}) => {\n  const date = joinDate(ts, config.dateJoint);\n\n  if (hasValue(ts.hours)) {\n    const time = joinTime(ts, config.timeJoint);\n    return [date, time].join(hasValue(config.joint) ? config.joint : defaults.joint);\n  }\n  else {\n    return date;\n  }\n}\n\n/**\n * Function to join the constituent parts of a date\n * @param {Object} ts - object containing `year`, `month`, `day`\n * @param {String} ts.year - the year as an integer\n * @param {String} ts.month - the month as an integer from 1 to 12\n * @param {String} ts.day - the month as an integer\n * @param {String} [joint='-'] - optional joining character for date segments\n * @return {String} - date string of the form `YYYY-MM-DD`\n */\nexport const joinDate = (ts, joint=defaults.dateJoint) =>\n  [\n    String(ts.year).padStart(4, '0'),\n    String(ts.month).padStart(2, '0'),\n    String(ts.day).padStart(2, '0'),\n  ].join(joint)\n\n/**\n * Function to join the constituent parts of a time into a string\n * @param {Object} ts - object containing `hours`, `minutes` and `seconds`.\n * @param {String} ts.hours - the hours as an integer from 0 to 23\n * @param {String} ts.minutes - the minutes as an integer from 0 to 59\n * @param {String} ts.seconds - the seconds as an integer from 0 to 59\n * @param {String} [joint=':'] - optional joining character for time segments\n * @return {String} - time string of the form `HH:MM:SS`\n */\nexport const joinTime = (ts, joint=defaults.timeJoint) =>\n  [\n    String(ts.hours).padStart(2, '0'),\n    String(ts.minutes).padStart(2, '0'),\n    String(ts.seconds).padStart(2, '0'),\n  ].join(joint)\n\n\n/**\n * Function to return the number of days in a month.\n * @param {Integer} month - the month as an integer from 1 to 12\n * @param {Intger} year - the year as an integer, e.g. 2022\n * @return {Integer} - the number of days in the month: 28, 29, 30 or 31\n */\nexport const daysInMonth = (month, year) => {\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    return 30;\n  }\n  else if (month == 2) {\n    return leapYear(year) ? 29 : 28;\n  }\n  else {\n    return 31;\n  }\n}\n\n/**\n * Function to determine if a year is a leap year\n * @param {Intger} year - the year as an integer, e.g. 2022\n * @return {Boolean} - true if the year is a leap year or false otherwise\n */\nexport const leapYear = year => {\n  if (year % 4) {\n    return false;\n  }\n  else if (year % 400 === 0) {\n    return true;\n  }\n  else if (year % 100 === 0) {\n    return false;\n  }\n  else {\n    return true;\n  }\n}\n\n\n/**\n * Function to create a new `Timestamp` object\n * @param {String|Integer|Date|Object} [ts] - timestamp\n * @param {Object} [options] - configuration options\n * @param {String} [options.joint=' '] - joining character between date and time parts\n * @param {String} [options.dateJoint='-'] - joining character for date segments\n * @param {String} [options.timeJoint=':'] - joining character for time segments\n * @return {Object} - a `Timestamp` object\n */\nexport const timestamp = (ts, options) => new Timestamp(ts, options)\n\nexport default Timestamp",
    "static": true,
    "longname": "/Users/abw/js/badger-timestamp/src/Timestamp.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "MATCH_DATE",
    "memberof": "src/Timestamp.js",
    "static": true,
    "longname": "src/Timestamp.js~MATCH_DATE",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-timestamp",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "MATCH_TIME",
    "memberof": "src/Timestamp.js",
    "static": true,
    "longname": "src/Timestamp.js~MATCH_TIME",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-timestamp",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "MATCH_STAMP",
    "memberof": "src/Timestamp.js",
    "static": true,
    "longname": "src/Timestamp.js~MATCH_STAMP",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-timestamp",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "STAMP_REGEX",
    "memberof": "src/Timestamp.js",
    "static": true,
    "longname": "src/Timestamp.js~STAMP_REGEX",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-timestamp",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "STAMP_PARTS",
    "memberof": "src/Timestamp.js",
    "static": true,
    "longname": "src/Timestamp.js~STAMP_PARTS",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-timestamp",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "DURATIONS",
    "memberof": "src/Timestamp.js",
    "static": true,
    "longname": "src/Timestamp.js~DURATIONS",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-timestamp",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "PLURALS",
    "memberof": "src/Timestamp.js",
    "static": true,
    "longname": "src/Timestamp.js~PLURALS",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-timestamp",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "{\"hour\": string, \"minute\": string, \"second\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Timestamp.js",
    "static": true,
    "longname": "src/Timestamp.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-timestamp",
    "importStyle": null,
    "description": "Default configuration options.",
    "lineNumber": 17,
    "type": {
      "types": [
        "{\"joint\": string, \"dateJoint\": string, \"timeJoint\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "class",
    "name": "Timestamp",
    "memberof": "src/Timestamp.js",
    "static": true,
    "longname": "src/Timestamp.js~Timestamp",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-timestamp",
    "importStyle": "{Timestamp}",
    "description": "The Timestamp class implements an object for parsing, manipulating\nand formatting ISO8601 timestamps.",
    "lineNumber": 27,
    "interface": false
  },
  {
    "__docId__": 58,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#constructor",
    "access": "public",
    "description": "Constructor for Timestamp object.",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Integer",
          "Date",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "ts",
        "description": "timestamp"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "' '",
        "defaultRaw": "' '",
        "name": "options.joint",
        "description": "joining character between date and time parts"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'-'",
        "defaultRaw": "'-'",
        "name": "options.dateJoint",
        "description": "joining character for date segments"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "':'",
        "defaultRaw": "':'",
        "name": "options.timeJoint",
        "description": "joining character for time segments"
      }
    ]
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "props",
    "memberof": "src/Timestamp.js~Timestamp",
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#props",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "debug",
    "memberof": "src/Timestamp.js~Timestamp",
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#debug",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "parts",
    "memberof": "src/Timestamp.js~Timestamp",
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#parts",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "copy",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#copy",
    "access": "public",
    "description": "Method to return a new object as a copy of the current object",
    "lineNumber": 90,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "new `Timestamp` object"
    },
    "params": []
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "year",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#year",
    "access": "public",
    "description": "Method to get or set the year.",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "name": "year",
        "description": "optional new value for year"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Integer"
      ],
      "spread": false,
      "description": "the year"
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "month",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#month",
    "access": "public",
    "description": "Method to get or set the month.",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "name": "month",
        "description": "optional new value for month"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Integer"
      ],
      "spread": false,
      "description": "the month"
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "day",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#day",
    "access": "public",
    "description": "Method to get or set the day.",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "name": "day",
        "description": "optional new value for day"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Integer"
      ],
      "spread": false,
      "description": "the day"
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "hours",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#hours",
    "access": "public",
    "description": "Method to get or set the hours.",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "name": "hours",
        "description": "optional new value for hours"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Integer"
      ],
      "spread": false,
      "description": "the hours"
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "minutes",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#minutes",
    "access": "public",
    "description": "Method to get or set the minutes.",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "name": "minutes",
        "description": "optional new value for minutes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Integer"
      ],
      "spread": false,
      "description": "the minutes"
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "seconds",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#seconds",
    "access": "public",
    "description": "Method to get or set the seconds.",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": true,
        "name": "seconds",
        "description": "optional new value for seconds"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Integer"
      ],
      "spread": false,
      "description": "the seconds"
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "date",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#date",
    "access": "public",
    "description": "Method to return a formatted date string in the form `YYYY-MM-DD`.",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'-'",
        "defaultRaw": "'-'",
        "name": "joint",
        "description": "optional joining character"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "formatted date string"
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "time",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#time",
    "access": "public",
    "description": "Method to return a formatted time string in the form `HH:MM:SS`.",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "':''",
        "defaultRaw": "':''",
        "name": "joint",
        "description": "optional joining character"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "formatted time string"
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "stamp",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#stamp",
    "access": "public",
    "description": "Method to return a formatted timestamp string in the form `YYYY-MM-DD HH:MM:SS`.",
    "lineNumber": 183,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "' '",
        "defaultRaw": "' '",
        "name": "options.joint",
        "description": "joining character between date and time parts"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'-'",
        "defaultRaw": "'-'",
        "name": "options.dateJoint",
        "description": "joining character for date segments"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "':'",
        "defaultRaw": "':'",
        "name": "options.timeJoint",
        "description": "joining character for time segments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "formatted date/time stamp"
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "dateObject",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#dateObject",
    "access": "public",
    "description": "Method to return a `Date` object",
    "lineNumber": 190,
    "return": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": "new date object"
    },
    "params": []
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "milliseconds",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#milliseconds",
    "access": "public",
    "description": "Method to return the number of millseconds since the Unix epoch",
    "lineNumber": 197,
    "return": {
      "nullable": null,
      "types": [
        "Integer"
      ],
      "spread": false,
      "description": "the number of milliseconds"
    },
    "params": []
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "epochSeconds",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#epochSeconds",
    "access": "public",
    "description": "Method to return the number of seconds since the Unix epoch",
    "lineNumber": 204,
    "return": {
      "nullable": null,
      "types": [
        "Integer"
      ],
      "spread": false,
      "description": "the number of seconds"
    },
    "params": []
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "adjust",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#adjust",
    "access": "public",
    "description": "Method to adjust the timestamp.  The duration can be specified as a string containing\none or more items to adjust in either singular or plural form, e.g. `\"1 year, 1 month\"`,\n`\"2 years 2 months\"`, etc. Or it can be specified as an object: `{ year: 1, month: 1 }`,\n`{ years: 2, months: 2 }`, etc.",
    "examples": [
      "ts.adjust(\"1 year 2 months 3 hours\")",
      "ts.adjust({ year: 1, months: 2, hours: 3 })"
    ],
    "lineNumber": 218,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "a string or object of adjustments"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "compare",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#compare",
    "access": "public",
    "description": "Method to compare the timestamp to another.  The arguments can be any that are accepted\nby the constructor.\none or more items to adjust in either singular or plural form, e.g. `\"1 year, 1 month\"`,\n`\"2 years 2 months\"`, etc. Or it can be specified as an object: `{ year: 1, month: 1 }`,\n`{ years: 2, months: 2 }`, etc.",
    "lineNumber": 309,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "any argument(s) accepted by the constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Integer"
      ],
      "spread": false,
      "description": "-1 if the timestamp is before the comparator, 0 if it's equal, +1 if it's after."
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "equal",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#equal",
    "access": "public",
    "description": "Method to compare one timestamp to another for equality",
    "lineNumber": 336,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "any argument(s) accepted by the constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if the timestamp is equal to the operand"
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "before",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#before",
    "access": "public",
    "description": "Method to test for the timestamp coming before another timestamp",
    "lineNumber": 344,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "any argument(s) accepted by the constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if the timestamp is before the operand"
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "after",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#after",
    "access": "public",
    "description": "Method to test for the timestamp coming after another timestamp",
    "lineNumber": 352,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "any argument(s) accepted by the constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if the timestamp is after the operand"
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "notBefore",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#notBefore",
    "access": "public",
    "description": "Method to test for the timestamp being equal to or coming after another timestamp",
    "lineNumber": 360,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "any argument(s) accepted by the constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if the timestamp is equal to or coming after the operand"
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "notAfter",
    "memberof": "src/Timestamp.js~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Timestamp.js~Timestamp#notAfter",
    "access": "public",
    "description": "Method to test for the timestamp being equal to or coming before another timestamp",
    "lineNumber": 368,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "any argument(s) accepted by the constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if the timestamp is equal to or coming before the operand"
    }
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "isTimestamp",
    "memberof": "src/Timestamp.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Timestamp.js~isTimestamp",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-timestamp",
    "importStyle": "{isTimestamp}",
    "description": "Function to determine is a string is a valid timestamp.",
    "lineNumber": 378,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ts",
        "description": "timestamp string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "value indicating if the string is a timestamp"
    }
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "splitTimestamp",
    "memberof": "src/Timestamp.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Timestamp.js~splitTimestamp",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-timestamp",
    "importStyle": "{splitTimestamp}",
    "description": "Function to split a timestamp into its constituent parts",
    "lineNumber": 386,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ts",
        "description": "timestamp string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "object containing `year`, `month`, `day`, `hours`, `minutes` and `seconds`."
    }
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "isDate",
    "memberof": "src/Timestamp.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Timestamp.js~isDate",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-timestamp",
    "importStyle": "{isDate}",
    "description": "Function to determine is a valid is a `Date` object",
    "lineNumber": 405,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "date object or other value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "value indicating if the `date` is a `Date` object"
    }
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "unpackNow",
    "memberof": "src/Timestamp.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Timestamp.js~unpackNow",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-timestamp",
    "importStyle": "{unpackNow}",
    "description": "Function to return an object containing the constituent timestamp parts for the current time.",
    "lineNumber": 412,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "object containing `year`, `month`, `day`, `hours`, `minutes` and `seconds`."
    },
    "params": []
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "parseDate",
    "memberof": "src/Timestamp.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Timestamp.js~parseDate",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-timestamp",
    "importStyle": "{parseDate}",
    "description": "Function to return an object containing the constituent timestamp parts for a date/time.",
    "lineNumber": 420,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "date object or string that can be parsed by `Date.parse()`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "object containing `year`, `month`, `day`, `hours`, `minutes` and `seconds`."
    }
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "unpackDate",
    "memberof": "src/Timestamp.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Timestamp.js~unpackDate",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-timestamp",
    "importStyle": "{unpackDate}",
    "description": "Function to return an object containing the constituent timestamp parts for a `Date` object",
    "lineNumber": 428,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "date object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "object containing `year`, `month`, `day`, `hours`, `minutes` and `seconds`."
    }
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "parseDuration",
    "memberof": "src/Timestamp.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Timestamp.js~parseDuration",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-timestamp",
    "importStyle": "{parseDuration}",
    "description": "Function to parse a duration string, e.g. `1 hour 3 minutes`.\nQuantities must be integers. Units can be singular (e.g. `hour`) or plural (e.g. `hours`).\nOther characters may appear between sections, e.g. `1 hour, 2 minutes and 3 seconds`.",
    "lineNumber": 444,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "duration string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "object containing any of `year`, `month`, `day`, `hour`, `minute` and `second`."
    }
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "singularDurations",
    "memberof": "src/Timestamp.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Timestamp.js~singularDurations",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-timestamp",
    "importStyle": "{singularDurations}",
    "description": "Function to convert an object containing any plural duration units (e.g. `hours`) to the singular counterpart (e.g. `hour`).",
    "lineNumber": 461,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "object containing duration elements, either plural or singluar."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "object containing any of `year`, `month`, `day`, `hour`, `minute` and `second`."
    }
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "joinTimestamp",
    "memberof": "src/Timestamp.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Timestamp.js~joinTimestamp",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-timestamp",
    "importStyle": "{joinTimestamp}",
    "description": "Function to join the constituent parts of a time stamp into a string",
    "lineNumber": 486,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ts",
        "description": "object containing `year`, `month`, `day`, and optionally, `hours`, `minutes` and `seconds`."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ts.year",
        "description": "the year as an integer"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ts.month",
        "description": "the month as an integer from 1 to 12"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ts.day",
        "description": "the month as an integer"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ts.[hours]",
        "description": "the hours as an integer from 0 to 23"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ts.[minutes]",
        "description": "the minutes as an integer from 0 to 59"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ts.[seconds]",
        "description": "the seconds as an integer from 0 to 59"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "config",
        "description": "optional configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "' '",
        "defaultRaw": "' '",
        "name": "config.joint",
        "description": "joining character between date and time parts"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'-'",
        "defaultRaw": "'-'",
        "name": "config.dateJoint",
        "description": "joining character for date segments"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "':'",
        "defaultRaw": "':'",
        "name": "config.timeJoint",
        "description": "joining character for time segments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "timestamp string of the form `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS`"
    }
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "joinDate",
    "memberof": "src/Timestamp.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Timestamp.js~joinDate",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-timestamp",
    "importStyle": "{joinDate}",
    "description": "Function to join the constituent parts of a date",
    "lineNumber": 507,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ts",
        "description": "object containing `year`, `month`, `day`"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ts.year",
        "description": "the year as an integer"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ts.month",
        "description": "the month as an integer from 1 to 12"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ts.day",
        "description": "the month as an integer"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'-'",
        "defaultRaw": "'-'",
        "name": "joint",
        "description": "optional joining character for date segments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "date string of the form `YYYY-MM-DD`"
    }
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "joinTime",
    "memberof": "src/Timestamp.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Timestamp.js~joinTime",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-timestamp",
    "importStyle": "{joinTime}",
    "description": "Function to join the constituent parts of a time into a string",
    "lineNumber": 523,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ts",
        "description": "object containing `hours`, `minutes` and `seconds`."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ts.hours",
        "description": "the hours as an integer from 0 to 23"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ts.minutes",
        "description": "the minutes as an integer from 0 to 59"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ts.seconds",
        "description": "the seconds as an integer from 0 to 59"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "':'",
        "defaultRaw": "':'",
        "name": "joint",
        "description": "optional joining character for time segments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "time string of the form `HH:MM:SS`"
    }
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "daysInMonth",
    "memberof": "src/Timestamp.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Timestamp.js~daysInMonth",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-timestamp",
    "importStyle": "{daysInMonth}",
    "description": "Function to return the number of days in a month.",
    "lineNumber": 537,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "month",
        "description": "the month as an integer from 1 to 12"
      },
      {
        "nullable": null,
        "types": [
          "Intger"
        ],
        "spread": false,
        "optional": false,
        "name": "year",
        "description": "the year as an integer, e.g. 2022"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Integer"
      ],
      "spread": false,
      "description": "the number of days in the month: 28, 29, 30 or 31"
    }
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "leapYear",
    "memberof": "src/Timestamp.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Timestamp.js~leapYear",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-timestamp",
    "importStyle": "{leapYear}",
    "description": "Function to determine if a year is a leap year",
    "lineNumber": 554,
    "params": [
      {
        "nullable": null,
        "types": [
          "Intger"
        ],
        "spread": false,
        "optional": false,
        "name": "year",
        "description": "the year as an integer, e.g. 2022"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if the year is a leap year or false otherwise"
    }
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "timestamp",
    "memberof": "src/Timestamp.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Timestamp.js~timestamp",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-timestamp",
    "importStyle": "{timestamp}",
    "description": "Function to create a new `Timestamp` object",
    "lineNumber": 579,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Integer",
          "Date",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "ts",
        "description": "timestamp"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "' '",
        "defaultRaw": "' '",
        "name": "options.joint",
        "description": "joining character between date and time parts"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'-'",
        "defaultRaw": "'-'",
        "name": "options.dateJoint",
        "description": "joining character for date segments"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "':'",
        "defaultRaw": "':'",
        "name": "options.timeJoint",
        "description": "joining character for time segments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a `Timestamp` object"
    }
  },
  {
    "kind": "index",
    "content": "# badger-timestamp\n\nThis is a simple module for parsing, manipulating and formatting\nISO8601 timestamps, e.g. `YYYY-MM-DD HH::MM::SS`.\n\nIt is a very simple implementation that is intended to be lightweight\nalternative to more feature-rich packages like moment, luxon, dayjs,\netc.\n\nThe primary goal is to be able to convert between database timestamps\nand human-readable strings, and to allow simple date adjustments,\ne.g. + 1 year, + 3 months, etc.\n\nIt is implemented as a thin wrapper around the native JS Date object.\n\n## Installation\n\nInstall `badger-timestamp` using your favourite package manager.\n\n### npm\n\n    npm install @abw/badger-timestamp\n\n### pnpm\n\n    pnpm add @abw/badger-timestamp\n\n### yarn\n\n    yarn add @abw/badger-timestamp\n\n## Documentation\n\nRead the [Manual](https://abw.github.io/badger-timestamp/docs/manual) for\nexamples of use and the [API documentation](https://abw.github.io/badger-timestamp/docs/) for\nfurther details.\n\n## Author\n\nAndy Wardley <abw@wardley.org>",
    "longname": "/Users/abw/js/badger-timestamp/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@abw/badger-timestamp\",\n  \"version\": \"1.0.2\",\n  \"description\": \"Simple timestamp utility\",\n  \"type\": \"module\",\n  \"main\": \"dist/badger-timestamp.cjs\",\n  \"module\": \"dist/badger-timestamp.mjs\",\n  \"browser\": \"dist/badger-timestamp.umd.js\",\n  \"exports\": {\n    \".\": {\n      \"require\": \"./dist/badger-timestamp.cjs\",\n      \"import\": \"./dist/badger-timestamp.mjs\"\n    }\n  },\n  \"author\": \"Andy Wardley\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/abw/badger-timestamp.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/abw/badger-timestamp/issues\"\n  },\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"dev\": \"rollup -c -w\",\n    \"lint\": \"eslint 'src/**/*'\",\n    \"docs:build\": \"esdoc\",\n    \"docs:serve\": \"serve docs\",\n    \"test\": \"ava\",\n    \"pretest\": \"pnpm run build\"\n  },\n  \"keywords\": [\n    \"badger\",\n    \"timestamp\",\n    \"utility\",\n    \"ISO8601\"\n  ],\n  \"devDependencies\": {\n    \"@itsjamie/esdoc-cli\": \"^0.5.0\",\n    \"@itsjamie/esdoc-core\": \"^0.5.0\",\n    \"@itsjamie/esdoc-importpath-plugin\": \"^0.5.0\",\n    \"@itsjamie/esdoc-inject-style-plugin\": \"^0.5.0\",\n    \"@itsjamie/esdoc-standard-plugin\": \"^0.5.0\",\n    \"@rollup/plugin-commonjs\": \"^11.0.1\",\n    \"@rollup/plugin-node-resolve\": \"^7.1.3\",\n    \"ava\": \"^4.3.0\",\n    \"eslint\": \"^8.20.0\",\n    \"rollup\": \"^2\",\n    \"rollup-plugin-terser\": \"^7.0.2\"\n  },\n  \"dependencies\": {\n    \"@abw/badger-utils\": \"^1.0.3\"\n  }\n}\n",
    "longname": "/Users/abw/js/badger-timestamp/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "# badger\n\n<img src=\"./images/badger2.svg\" width=\"300\"/>\n\nThis is the manual for the `badger-timestamp` Javascript module.\n\n* [Getting Started](manual/getting_started.html)\n* [Creating Timestamps](manual/creating_timestamps.html)\n* [Formatting Timestamps](manual/formatting_timestamps.html)\n* [Adjusting Timestamps](manual/adjusting_timestamps.html)\n* [Comparing Timestamps](manual/comparing_timestamps.html)\n* [Utility Function](manual/utility_functions.html)\n\n# Author\n[Andy Wardley](https://github.com/abw)\n",
    "longname": "/Users/abw/js/badger-timestamp/manual/index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-timestamp/manual/getting_started.md",
    "name": "./manual/getting_started.md",
    "content": "# Getting Started\n\n- [Installation](#installation)\n- [Basic Use](#basic-use)\n\n## Installation\n\nUse your favourite package manager to install the module\nfrom `@abw/badger-timestamp`.\n\n### npm\n\n    npm install @abw/badger-timestamp\n\n### pnpm\n\n    pnpm add @abw/badger-timestamp\n\n### yarn\n\n    yarn add @abw/badger-timestamp\n\n## Basic Use\n\nImport the `timestamp()` function using ESM syntax.\n\n```js\nimport { timestamp } from '@abw/badger-timestamp'\n```\n\nOr via `require()` if you're still using Common JS format.\n\n```js\nconst { timestamp } = require('@abw/badger-timestamp')\n```\n\nCall the function with an ISO8601 timestamp to create a new object.\n\n```js\nconst ts = timestamp('2022-08-12T08:16:24');\n```\n\nThe `timestamp()` function is a simple utility wrapper which creates\na new `Timestamp` object.  If you prefer you can import the `Timestamp`\nclass, either by name or as the default export, and instantiate a new\nobject yourself.\n\n```js\nimport Timestamp from '@abw/badger-timestamp'\n\nconst ts = new Timestamp('2022-08-12T08:16:24');\n```\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-timestamp/manual/creating_timestamps.md",
    "name": "./manual/creating_timestamps.md",
    "content": "# Creating Timestamps\n\n- [Valid Formats](#valid-formats)\n- [Now is the Time](#now-is-the-time)\n- [Copy Constructor](#copy-constructor)\n- [Date Constructor](#date-constructor)\n- [Javascript Epoch Time](#javascript-epoch-time)\n- [Unix Epoch Time](#unix-epoch-time)\n- [Component Object](#component-object)\n- [Configuration Options](#configuration-options)\n\n## Valid Formats\n\nThe module is reasonable flexible about what it considers to be a\nvalid timestamp string.\n\nFor example, you can use a space to separate the date and time.\n\n```js\nconst ts = timestamp('2022-08-12 08:16:24');\n```\n\nOr you can use any other non-numerical characters as separators in the\ndate and/or time.\n\n```js\nconst ts = timestamp('2022/08/12 08.16.24');\n```\n\nThe only requirement is that the date should have:\n\n* 4 digits for the year\n* 1 or 2 digits for the month\n* 1 or 2 digits for the day\n\nAnd the time should have:\n\n* 1 or 2 digits for the hours (24 hour clock only)\n* 2 digits for the minutes\n* 2 digits for the seconds\n\nAnd non-numerical character can be used as separators in the date and time.\nUse either a space or the `T` character to separate the date and time.\n\nYou can also omit the time altogether if you just want to represent a date.\n\n```js\nconst date = timestamp('2022-08-12');\n```\n\nIf you don't mind taking a bit of a gamble then you can pass in a different\ntime string and hope that the implementation of the `Date.parse()` function\non the platform you're using can parse it.\n\n```js\nconst ts = timestamp('12 August 2022 09:01:02');\n```\n\n## Now is the Time\n\nIf you don't provide a timestamp string then it will default to the current\ndate and time.\n\n```js\nconst now = timestamp();\n```\n\n## Copy Constructor\n\nYou can create a timestamp by passing an existing timestamp object.\n\n```js\nconst now1 = timestamp();\nconst now2 = timestamp(now1);\n```\n\nYou can also use the `copy()` method to create a copy of a timestamp.\n\n```js\nconst now1 = timestamp();\nconst now2 = now1.copy();\n```\n\n## Date Constructor\n\nYou can create a timestamp by passing an existing [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object.\n\n```js\nconst date = new Date('2022-08-12T09:05:12');\nconst ts   = timestamp(date);\n```\n\n## Javascript Epoch Time\n\nIn the land of Javascript, dates can be represented by the number\nof *milliseconds* since the Unix epoch of January 1st 1970.  This is\nthe value returned by the\n[getTime()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)\nmethod of the [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)\nobject.\n\nPass an integer number of milliseconds to the `timestamp()` function\nto use this value.\n\n```js\nconst date = new Date('2022-08-12T09:05:12');\nconst ms   = date.getTime();\nconst ts   = timestamp(ms);\n```\n\nOr, if being explicit is your thing, pass an object with the milliseconds\ndefined as the `ms` value.\n\n```js\nconst date = new Date('2022-08-12T09:05:12');\nconst ts   = timestamp({ ms: date.getTime() });\n```\n\n## Unix Epoch Time\n\nIn the land of Unix, they use *seconds* since the Unix epoch rather than\nmilliseconds.\n\nPass an object with a `unix` number of seconds into the `timestamp()` function\nto use this value.\n\n```js\nconst ts = timestamp({ unix: 123456789 });\n```\n\n## Component Object\n\nThe final way to create a timestamp is to pass an object containing\n`year`, `month`, `day`, and optionally, `hours`, `minutes` and `seconds`.\n\nNote that by convention, the date components are all singular (e.g. `year` not\n`years`) and the time components are all plural (e.g. `minutes` not `minute`).\nI don't know why we do this, but that's what we do.\n\nAlso note that the `month` ranges from 1 to 12, in keeping with the human convention,\nrather than 0 to 11 to pander to the computers.\n\n```js\nconst ts = timestamp({\n  year:    2022,\n  month:   8,\n  date:    12,\n  hours:   9,\n  minutes: 17,\n  seconds: 32\n});\n```\n\n## Configuration Options\n\nA second argument can be passed to the `timestamp()` function (or the `Timestamp` constructor)\nas an object containing configuration options.\n\nThese can include:\n\n* `joint` - (default: ' ') the value used to join date and time\n* `dateJoint` - (default: '-') the value used to join date elements\n* `timeJoint` - (default: ':') the value used to join time elements\n\nThese are used by the `date()`, `time()` and `stamp()` functions used to format\nthe timestamp, or parts of it, as strings.  They do not affect how the module\nparses timestamps.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-timestamp/manual/formatting_timestamps.md",
    "name": "./manual/formatting_timestamps.md",
    "content": "# Formatting Timestamps\n\n- [Generating a Timestamp](#generating-a-timestamp)\n- [Formatting the Date](#formatting-the-date)\n- [Formatting the Time](#formatting-the-time)\n\n## Generating a Timestamp\n\nCall the `stamp()` method to regenerate the timestamp as a string.\n\n```js\nconst ts1 = timestamp('2022-08-12 08:16:24');\nconst ts2 = ts1.stamp();    // 2022-08-12 08:16:24\n```\n\nThe configuration options `joint`, `dateJoint` and `timeJoint` can be used\nto specify what strings are used to join the date and time (`joint`),\ncomponents of the date (`dateJoint`) and components of the time (`timeJoint`).\n\nThese can be passed in as configuration options when you create the timestamp.\n\n```js\nconst ts1 = timestamp('2022-08-12 08:16:24', { dateJoint: '/', joint: 'T' });\nconst ts2 = ts1.stamp();    // 2022/08/12T08:16:24\n```\n\nOr as options passed to the `stamp()` method.\n\n```js\nconst ts1 = timestamp('2022-08-12 08:16:24');\nconst ts2 = ts1.stamp({ dateJoint: '/', joint: 'T' });    // 2022/08/12T08:16:24\n```\n\n## Formatting the Date\n\nCall the `date()` method to format the date as a string.\n\n```js\nconst ts = timestamp('2022-08-12 08:16:24');\nconst dt = ts.date();    // 2022-08-12\n```\n\nThe method will use the `dateJoint` string to join components of the date.\nThis can be specified as a configuration option when creating the timestamp:\n\n```js\nconst ts = timestamp('2022-08-12 08:16:24', { dateJoint: '/' });\nconst dt = ts.date();    // 2022/08/12\n```\n\nOr passed as an argument to the `date()` method:\n\n```js\nconst ts = timestamp('2022-08-12 08:16:24');\nconst dt = ts.date('/');    // 2022/08/12\n```\n\n## Formatting the Time\n\nCall the `time()` method to format the time as a string.\n\n```js\nconst ts = timestamp('2022-08-12 08:16:24');\nconst tm = ts.time();    // 08:16:24\n```\n\nThe method will use the `timeJoint` string to join components of the time.\nThis can be specified as a configuration option when creating the timestamp:\n\n```js\nconst ts = timestamp('2022-08-12 08:16:24', { timeJoint: '::' });\nconst tm = ts.time();    // 08::16::24\n```\n\nOr passed as an argument to the `time()` method:\n\n```js\nconst ts = timestamp('2022-08-12 08:16:24');\nconst tm = ts.time('::');    // 08::16::24\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-timestamp/manual/adjusting_timestamps.md",
    "name": "./manual/adjusting_timestamps.md",
    "content": "# Adjusting Timestamps\n\n- [Adjusting the Date and Time](#adjusting-the-date-and-time)\n- [Adjustment String](#adjustment-string)\n\n## Adjusting the Date and Time\n\nUse the `adjust()` method to adjust the date and/or time.\nPass an object containing adjustments to be made to one or\nmore of the date or time components.\n\n```js\nconst ts = timestamp('2022-09-08 07:06:05');\nts.adjust({ year: 1 });  // 2023-09-08 07:06:05\n```\n\nNote that this method mutates the object.  Use the `copy()`\nmethod first if you want to keep the original unmodified.\n\n```js\nconst ts1 = timestamp('2022-09-08 07:06:05');\nconst ts2 = ts1.copy().adjust({ year: 1 });  // 2023-09-08 07:06:05\n```\n\nYou can specify any of the date or time components in either singular\nor plural form.  The values can be positive or negative.\n\n```js\n// singular names are OK\nts.adjust({\n    year: 1, month: 2, day: 3, hour: 4, minute: 5, second: 6\n});\n// plural names are OK\nts.adjust({\n    years: 1, months: 2, days: 3, hours: 4, minutes: 5, seconds: 6\n});\n// negative values are  OK\nts.adjust({\n    years: -5, months: -24, days: -100, hours: -200, minutes: -300, seconds: -600\n});\n```\nThe method will correctly handle wrap-arounds, e.g. adding 100 days to the current\ndate will return the correct date 100 days from now.  The module only supports the\nGregorian calendar and will not work correctly for dates before September 1752 when\nthe calendar was introduced and\n[11 days were 'lost'](https://www.historic-uk.com/HistoryUK/HistoryofBritain/Give-us-our-eleven-days/).\n\n## Adjustment String\n\nYou can also pass a string to the `adjust()` method.\n\n```js\nts.adjust(\"5 years\");\n```\nAs above, the units can be singular (e.g. `year`) or plural (e.g. `years`) and the\nvalues can be positive or negative.\n\n```js\nts.adjust(\"1 year\");\nts.adjust(\"5 years\");\nts.adjust(\"-5 years\");\n```\n\nYou can specify multiple items.  They can be separated by whitespace or any other non-word\ncharacters.\n\n```js\nts.adjust(\"1 year 2 months 3 days\");\nts.adjust(\"1 year, 2 months, 3 days\");\nts.adjust(\"1 year|2 months|3 days\");\n```\n\nThe pattern matching algorithm looks for a sequence of digits (with an optional leading\nnegative sign) and then a word.  Anything else will be ignored.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-timestamp/manual/comparing_timestamps.md",
    "name": "./manual/comparing_timestamps.md",
    "content": "# Comparing Timestamps\n\n- [The compare() Method](#the-compare-method)\n- [Equal and Not Equal](#equal-and-not-equal)\n- [Before and After](#before-and-after)\n\n## The compare() Method\n\nThe `compare()` method can be used to compare a timestamp to\nanother one.  It accepts any of the arguments that can be used\nto construct a timestamp.\n\n```js\nconst ts1  = timestamp('2022/08/12 08:16:24');\n\n// compare against a timestamp string\nconst cmp1 = ts1.compare('2022/09/13 09:16:24');\n\n// compare against another timestamp object\nconst ts2  = timestamp('2022/09/13 09:16:24');\nconst cmp2 = ts1.compare(ts2);\n\n// compare against a Date object\nconst dt1  = new Date('2022/09/13 09:16:24');\nconst cmp2 = ts1.compare(dt1);\n\n// etc...\n```\n\nThe value returned is `-1` if the timestamp object is less than\n(i.e. chronologically before) the timestamp argument passed, `+1`\nif it's greater that it (i.e. chronologically after) or `0` if it's\nthe same.\n\n## Equality\n\nAs a convenience, the `equal()` method can be used to determine if a\ntimestamp is equal to another one.\n\n```js\nconst ts1 = timestamp('2022-08-12 08:16:24');\nts1.equal('2022-08-12 08:16:24'); // true\nts1.equal('2023-09-13 09:17:25'); // false\n```\n\n## Before and After\n\nThe `before()` and `after()` methods are also a convenience for determining\nif a timestamp is before or after another one.\n\n```js\nconst ts1 = timestamp('2022-08-12 08:16:24');\nts1.before('2022-08-12 08:16:25'); // true\nts1.after('2022-08-12 08:16:23');  // true\n```\n\nThe `notBefore()` and `notAfter()` methods are also provided for\nwhen you want to test if a timestamp is after or equal to another one\n(`notBefore()`), or before or equal to another one (`notAfter()`).\n\n```js\nconst ts1 = timestamp('2022-08-12 08:16:24');\nts1.notAfter('2022-08-12 08:16:24');  // true\nts1.notAfter('2022-08-12 08:16:25');  // true\nts1.notBefore('2022-08-12 08:16:24'); // true\nts1.notBefore('2022-08-12 08:16:23'); // true\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-timestamp/manual/utility_functions.md",
    "name": "./manual/utility_functions.md",
    "content": "# Utility Functions\n\n- [Assertion Function](#assertion-functions)\n- [Parsing Function](#parsing-functions)\n- [Formatting Function](#formatting-functions)\n- [Miscellaneous Function](#miscellaneous-functions)\n\n## Assertion Functions\n\n### isTimestamp(ts)\n\nFunction to determine if a string matches a timestamp format.\n\n### isDate(date)\n\nFunction to determine if a variable is a `Date` object.\n\n## Parsing Functions\n\n### splitTimestamp(string)\n\nParses a timestamp string and return an object containing the component parts:\n`year`, `month`, `day`, `hours`, `minutes` and `seconds`.\n\n### unpackDate(date)\n\nUnpacks the items from a `Date` object and returns an object containing the\ncomponent parts: `year`, `month`, `day`, `hours`, `minutes` and `seconds`.\n\n### unpackNow()\n\nCreates a `Date` object for the current time then calls `unpackDate()` to\nunpack it into constituent parts.\n\n### parseDate(string)\n\nPasses a string the `Date.parse()` constructor and then calls `unpackDate()`\nto unpack it into constituent parts.\n\n### parseDuration(string)\n\nParses a duration string (e.g. `1 year 3 months`) and returns an object containing\nthe consituent parts (e.g. `{ year: 1, month: 3 }`).  Note that this always returns\ncomponents in singular form (e.g. `year` and `month`) regardless of how they were\nspecified in the string.\n\n### singularDurations(durations)\n\nFunction to convert an object containing any plural duration units (e.g. `hours`) to\nthe singular counterpart (e.g. `hour`).\n\n## Formatting Functions\n\n### joinDate(timestamp, joint)\n\nFunction to join the constituent parts of a date.\n\n### joinTime(timestamp, joint)\n\nFunction to join the constituent parts of a time.\n\n### joinTimestamp(timestamp, config)\n\nFunction to format a timestamp string from a `Timestamp` object.\nThe `config` options can be used to override the default values\nfor `joint`, `dateJoint` and/or `timeJoint`.\n\n## Miscellaneous Functions\n\n### daysInMonth(month, year)\n\nReturn the number of days in a month.\n\n### leapYear(year)\n\nReturns a boolean value indicating if a year is a leap year.\n",
    "static": true,
    "access": "public"
  }
]